buildscript {
    ext {
        kotlinVersion = '1.3.70'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

group = 'io.axoniq.labs'
version = '0.0.1-SNAPSHOT'
description 'AxonIQ Getting Started - Chat application'

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "idea"
    apply plugin: 'kotlin'

    repositories {
        mavenCentral()
        jcenter()

        maven {
            url 'https://repo.spring.io/libs-milestone'
        }

        maven {
            url "${project.rootDir}/build/repo"
        }
    }

    sourceCompatibility = '11'
    targetCompatibility = '11'
    assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13"

    test {
        useJUnitPlatform()
        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
    }

    // apply from: "${rootDir}/gradle/pmd.gradle"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"

    dependencies {
        compile "javax.money:money-api:$javaxMoneyApiVersion"
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        implementation "org.springframework.boot:spring-boot-starter-parent:$springBootVersion"
        implementation "org.springframework.boot:spring-boot-starter-freemarker:$springBootVersion"
        implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"

        implementation "io.springfox:springfox-swagger2:$springFoxVersion"
        implementation "io.springfox:springfox-swagger-ui:$springFoxVersion"

        implementation "org.javamoney:moneta:$monetaVersion"

        implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
        implementation "org.apache.commons:commons-collections4:$commonsCollectionsVersion"

        implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
        implementation "com.h2database:h2:$h2Version"

        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

        testImplementation "io.qala.datagen:qala-datagen:$datagenVersion"
        testImplementation "io.qala.datagen:qala-datagen-java8types:$datagenVersion"
        // testImplementation "io.kotest:kotest-runner-junit5:3.4.2"
        // testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"

        // spek requires kotlin-reflect, can be omitted if already in the classpath
        // testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:${spek_version}"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

        testImplementation "org.assertj:assertj-core:$assertjVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
    }
}

wrapper {
    gradleVersion = "$gradleVersion"
}
